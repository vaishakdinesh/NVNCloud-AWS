{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "csye6225 cloudformation application stack",
  "Parameters": {

  		"DBName": {
  			"Description": "Database Name",
  			"Type": "String"
  		},
  		"DBUser": {
  			"Description": "Database User",
  			"Type": "String"
  		},
  		"DBPassword": {
  			"Description": "Database Password",
  			"Type": "String"
  		},
      "EC2ImageId":{
        "Description": "EC2 ImageId",
  			"Type": "String"
      },
      "EC2InstanceType":{
        "Description": "EC2 InstanceType",
  			"Type": "String"
      },
      "EbsDeviceName" : {
        "Description": "Ebs DeviceName",
  			"Type": "String"
      },
      "EbsVolumeType" : {
        "Description": "Ebs VolumeType",
  			"Type": "String"
      },
      "EbsVolumeSize" : {
        "Description": "Ebs VolumeSize",
  			"Type": "Number"
      },
      "KeyPairName" : {
        "Description": "Key Pair Name",
  			"Type": "String"
      },
      "AccessKeyId": {
			"Description": "Access key",
			"Type": "String"
  		},
  		"SecretAccessKey": {
  		"Description": "Secret key",
  		"Type": "String"
      },
      "MySqlClientPass":{
        "Description": "Root password for MySQL client on EC2 Instance",
        "Type": "String"
      }
    },

    "Resources" : {
        "NVNWebServerGroup" : {
              "Type" : "AWS::AutoScaling::AutoScalingGroup",
              "Properties" : {
                "Cooldown" : "60",
                "VPCZoneIdentifier" : [{ "Fn::ImportValue" :"PublicSubnet1"}, { "Fn::ImportValue" :"PublicSubnet2"}],
                "DesiredCapacity" : "3",
                "TargetGroupARNs" : [ { "Ref" : "NVNLoadBalancerTargetGroup" } ],
                "LaunchConfigurationName" : { "Ref" : "NVNLaunchConfig" },
                "MinSize" : "3",
                "MaxSize" : "7",
                "Tags" : [ {
                   "Key" : "Name",
                   "Value" : "NVNCloudEC2-1",
                   "PropagateAtLaunch" : "true"
                }, {
                   "Key" : "Name",
                   "Value" : "NVNCloudEC2-2",
                   "PropagateAtLaunch" : "true"
                }, {
                   "Key" : "Name",
                   "Value" : "NVNCloudEC2-3",
                   "PropagateAtLaunch" : "true"
                } , {
                   "Key" : "Name",
                   "Value" : "NVNCloudEC2-4",
                   "PropagateAtLaunch" : "false"
                } , {
                   "Key" : "Name",
                   "Value" : "NVNCloudEC2-5",
                   "PropagateAtLaunch" : "false"
                } , {
                   "Key" : "Name",
                   "Value" : "NVNCloudEC2-6",
                   "PropagateAtLaunch" : "false"
                } , {
                   "Key" : "Name",
                   "Value" : "NVNCloudEC2-7",
                   "PropagateAtLaunch" : "false"
                } ]
              }
            },
          "NVNLaunchConfig" : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
      				"ImageId": { "Ref": "EC2ImageId" },
              "KeyName" : { "Ref": "KeyPairName" },
              "IamInstanceProfile" :{"Fn::ImportValue" : "EC2InstanceProfile"},
              "InstanceType": { "Ref": "EC2InstanceType" },
              "SecurityGroupIds" : [ { "Fn::ImportValue" : "EC2GroupName"} ],
              "AssociatePublicIpAddress": true,
              "UserData": {
                        "Fn::Base64": {
                            "Fn::Join": [
                                "",
                                [
                                    "#!/bin/bash -xe \n",
                                    "sudo apt-get update \n",
                                    "sudo apt-get install openjdk-8-jdk -y\n",
                                    "sudo apt-get install ruby -y \n",
                                    "sudo apt-get install wget -y \n",
                                    "sudo apt-get install python -y \n",
                                    "sudo apt-get update \n",
                                    "sudo wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install \n",
                                    "sudo chmod +x ./install \n",
                                    "sudo ./install auto \n",
                                    "sudo service codedeploy-agent start \n",
                                    "sudo apt-get install tomcat8 -y \n",
                                    "sudo wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py \n",
                                    "sudo touch /tmp/cwlogs.conf \n",
                                    "echo '[general]' >> /tmp/cwlogs.conf \n",
                                    "echo 'state_file = /var/awslogs/state/agent-state' >> /tmp/cwlogs.conf \n",
                                    "echo '[/var/lib/tomcat8/logs/csye6225-aws.log]' >> /tmp/cwlogs.conf \n",
                                    "echo 'file = /var/lib/tomcat8/logs/csye6225-aws.log' >> /tmp/cwlogs.conf \n",
                                    "echo 'log_stream_name = NVNLogStream' >> /tmp/cwlogs.conf \n",
                                    "echo 'log_group_name = ", {"Ref":"WebServerLogGroup"},"' >> /tmp/cwlogs.conf \n",
                                    "echo 'initial_position = start_of_file' >> /tmp/cwlogs.conf \n",
                                    "sudo python ./awslogs-agent-setup.py -n -r us-east-1 -c /tmp/cwlogs.conf  \n",
                                    "cd /etc/systemd/system \n",
                                    "sudo touch awslogs.service \n",
                                    "echo '[Unit]' >> awslogs.service \n",
                                    "echo 'Description=Service for CloudWatch Logs agent' >> awslogs.service \n",
                                    "echo 'After=rc-local.service' >> awslogs.service \n",
                                    "echo '[Service]' >> awslogs.service \n",
                                    "echo 'Type=simple' >> awslogs.service \n",
                                    "echo 'Restart=always' >> awslogs.service \n",
                                    "echo 'KillMode=process' >> awslogs.service \n",
                                    "echo 'TimeoutSec=infinity' >> awslogs.service \n",
                                    "echo 'PIDFile=/var/awslogs/state/awslogs.pid' >> awslogs.service \n",
                                    "echo 'ExecStart=/var/awslogs/bin/awslogs-agent-launcher.sh --start --background --pidfile $PIDFILE --user awslogs --chuid awslogs &' >> awslogs.service \n",
                                    "echo '[Install]' >> awslogs.service \n",
                                    "echo 'WantedBy=multi-user.target' >> awslogs.service \n",
                                    "sudo systemctl enable awslogs.service \n",
                                    "echo '#!/bin/sh' >> /usr/share/tomcat8/bin/setenv.sh \n",
                                    "sudo echo \"export JAVA_OPTS=\\\"\\$JAVA_OPTS -Dspring.profiles.active=aws\\\"\" >> /usr/share/tomcat8/bin/setenv.sh \n",
                                    {
                                                      "Fn::Join": [
                                                          "", [
                                                              "echo ' export JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.url=\"jdbc:mysql://",
                                                              {
                                                                  "Fn::GetAtt": [
                                                                      "NVNCloudRDSDB",
                                                                      "Endpoint.Address"
                                                                  ]
                                                              },
                                                              ":3306/",
                                                              {
                                                                  "Ref": "DBName"
                                                              },
                                                              "\"\"'>> /usr/share/tomcat8/bin/setenv.sh \n"
                                                          ]
                                                      ]
                                                  },
                                                  "echo 'export JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.username=\"",
                                                  {
                                                      "Ref": "DBUser"
                                                  },
                                                  "\"\"' >> /usr/share/tomcat8/bin/setenv.sh \n",
                                                  "echo 'export JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.password=\"",
                                                  {
                                                      "Ref": "DBPassword"
                                                  },
                                                  "\"\"' >> /usr/share/tomcat8/bin/setenv.sh \n",
                                                  "echo 'export JAVA_OPTS=\"$JAVA_OPTS -Damazon.s3.default-bucket=\"",
                                                  {
                                                      "Ref": "bucketName"
                                                  },
                                    "\"\"' >> /usr/share/tomcat8/bin/setenv.sh \n",
                                    "echo 'export JAVA_OPTS=\"$JAVA_OPTS -Daws.access-key-id=\"",
                                                  {
                                                      "Ref": "AccessKeyId"
                                                  },
                                                  "\"\"' >> /usr/share/tomcat8/bin/setenv.sh \n",
                                                  "echo 'export JAVA_OPTS=\"$JAVA_OPTS -Daws.access-secret-key=\"",
                                                  {
                                                      "Ref": "SecretAccessKey"
                                                  },
                                    "\"\"' >> /usr/share/tomcat8/bin/setenv.sh \n",
                                    "echo 'export JAVA_OPTS=\"$JAVA_OPTS -Damazon.sns.topic=\"",
                                                  {
                                                      "Ref": "SNSPasswordResetTopic"
                                                  },
                                    "\"\"' >> /usr/share/tomcat8/bin/setenv.sh \n",
                                                    "chmod +x /usr/share/tomcat8/bin/setenv.sh \n",
                                    "sudo service tomcat8 restart \n",
                                    {
                                      "Fn::Join":[
                                        "",[
                                          "sudo debconf-set-selections <<< 'mysql-server mysql-server/root_password password ",
                                          {"Ref": "MySqlClientPass"},
                                          "'\" \n"
                                        ]
                                      ]
                                    },
                                    {
                                      "Fn::Join":[
                                        "",[
                                          "sudo debconf-set-selections <<< 'mysql-server mysql-server/root_password_again password ",
                                          {"Ref": "MySqlClientPass"},
                                          "'\" \n"
                                        ]
                                      ]
                                    },
                                    "sudo apt-get -y install mysql-server \n"
                                ]
                            ]
                        }
                    },
              "BlockDeviceMappings": [{
                       "DeviceName" : { "Ref": "EbsDeviceName"},
                       "Ebs" : {
                          "VolumeType" : { "Ref": "EbsVolumeType"},
                          "VolumeSize" :{ "Ref": "EbsVolumeSize"},
                          "DeleteOnTermination" : false
                      }
                   }]
            }
          },
          "WebServerLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                        "RetentionInDays": 7
                    }
            },
            "SNSPasswordResetTopic":{
              "Type" : "AWS::SNS::Topic",
              "Properties" : {
                "DisplayName" : "forgotPassword",
                "TopicName" : "forgotPassword"
              }
            },
            "WebServerScaleUpPolicy": {
                "Type": "AWS::AutoScaling::ScalingPolicy",
                "Properties": {
                  "AdjustmentType": "ChangeInCapacity",
                  "AutoScalingGroupName": {
                    "Ref": "NVNWebServerGroup"
                  },
                  "Cooldown": "60",
                  "ScalingAdjustment": "1"
                }
              },
              "WebServerScaleDownPolicy": {
                "Type": "AWS::AutoScaling::ScalingPolicy",
                "Properties": {
                  "AdjustmentType": "ChangeInCapacity",
                  "AutoScalingGroupName": {
                    "Ref": "NVNWebServerGroup"
                  },
                  "Cooldown": "60",
                  "ScalingAdjustment": "-1"
                }
              },
              "CPUAlarmHigh": {
                "Type": "AWS::CloudWatch::Alarm",
                "Properties": {
                  "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
                  "MetricName": "CPUUtilization",
                  "Namespace": "AWS/EC2",
                  "Statistic": "Average",
                  "Period": "300",
                  "EvaluationPeriods": "2",
                  "Threshold": "90",
                  "AlarmActions": [
                    {
                      "Ref": "WebServerScaleUpPolicy"
                    }
                  ],
                  "Dimensions": [
                    {
                      "Name": "AutoScalingGroupName",
                      "Value": {
                        "Ref": "NVNWebServerGroup"
                      }
                    }
                  ],
                  "ComparisonOperator": "GreaterThanThreshold"
                }
              },
              "CPUAlarmLow": {
                "Type": "AWS::CloudWatch::Alarm",
                "Properties": {
                  "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
                  "MetricName": "CPUUtilization",
                  "Namespace": "AWS/EC2",
                  "Statistic": "Average",
                  "Period": "300",
                  "EvaluationPeriods": "2",
                  "Threshold": "70",
                  "AlarmActions": [
                    {
                      "Ref": "WebServerScaleDownPolicy"
                    }
                  ],
                  "Dimensions": [
                    {
                      "Name": "AutoScalingGroupName",
                      "Value": {
                        "Ref": "NVNWebServerGroup"
                      }
                    }
                  ],
                  "ComparisonOperator": "LessThanThreshold"
                }
              },
            "NVNLoadBalancer" : {
              "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
              "Properties" : {
                "Name" : "NVN-Cloud-LoadBalancer",
                "Subnets" : [ { "Fn::ImportValue" :"PublicSubnet1"}, { "Fn::ImportValue" :"PublicSubnet2"} ],
              }
            },
            "NVNLoadBalancerListner" : {
              "Type" : "AWS::ElasticLoadBalancingV2::Listener",
              "Properties" : {
                "DefaultActions" : [{
                  "Type" : "forward",
                  "TargetGroupArn" : { "Ref" : "NVNLoadBalancerTargetGroup" }
                }],
                "LoadBalancerArn" : { "Ref" : "NVNLoadBalancer" },
                "Port" : 80,
                "Protocol" : "HTTP"
              }
            },
            "NVNLoadBalancerTargetGroup" : {
              "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
              "Properties" : {
                "HealthCheckIntervalSeconds" : 30,
                "HealthCheckTimeoutSeconds" : 5,
                "HealthyThresholdCount" : 3,
                "Port" : 80,
                "Protocol" : "HTTP",
                "UnhealthyThresholdCount" : 5,
                "VpcId" : { "Fn::ImportValue" : "VpcId"}
              }
            }
      },
      "Outputs": {
        "SNSTopicARN": {
          "Description": "SNS Topic Arn",
          "Value": { "Ref": "SNSPasswordResetTopic"},
          "Export" : { "Name" : "SNSTopicARN" }
        }
      }
